# Task: find the length of a list
# Goal: understand problem size, decrease and conquer
#from rcviz import viz

# input: list L
# ouput: a number (lenght of L)

[py]
def rec_len(L):
	if L==[]: 	# 1. irreducible case
		return 0
	else:		# 2: reducible case
		first = L.pop(0)
		return rec_len(L) + 1

[py]

'''
Trace rec_len([10,3,0,5,20]).
rec_len([10,3,0,5,20])  returns rec_len([3,0,5,20]) + 1  (line 12)
rec_len([3,0,5,20]) returns rec_len([0,5,20]) + 1 (line 12)
rec_len([0,5,20]) returns rec_len([5,20]) + 1
rec_len([5,20]) returns rec_len([20]) + 1
rec_len([20]) returns rec_len([]) + 1
rec_len([]) returns 0.

Tracing function calls is one way to think about how a program behaves.


(my thinking process when I designed rec_len)
goal: want to design rec_len
L = [10,3,0,5,20]
rec_len([10,3,0,5,20]) should return 5.
first_item is 10  (in Python: first_item = L.pop(0))
if I remove first item from L and I can compute the length of new L (after first item popped.),
how can I compute the length of original L?
Reasoning: length of original L is simply 1 plus whatever the length of the new L.

How can I compute the length of the new L (after I popped first item from original L)???

Possibilites: use some external functionality to compute the length.  Not necessary because
we can use THE SAME STRATEGY. <---------

new L is [3,0,5,20].  Using the same strategy means: rec_len([3,0,5,20]).

Common mistake: trace this recursive call.
To solve this, rec_len([3,0,5,20]), I will pop first element, and use the same strategy on the new L.

Right thing to think: assume that same strategy is correct and ask yourself what it returns.
rec_len([3,0,5,20]) returns 4.
Then, based on our reasoning (line 22), what the function returns is 1 + 4, which is the correct answer.

What if you cannot pop first item (there's no first item)? Must take care of this case (because this strategy won't work without this.)  Ok, when L is empty, correct length is 0.  Must take care of this case separately.

'''
print(rec_len([10,3,0,5,20]))




!!arithmatic sum
will need to remember: n(n+1)/2 [discrete equivilence == inductive hypothesis] 
