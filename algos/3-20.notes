
# Master's theorem

T(n) = n^d + a*T(n/b)

To find out the complexity of T(n), we compare d and log_b(a)
We have 3 cases:
(1) d > log_b(a), T(n) is in Theta(n^d)
(2) d < log_b(a), T(n) is in Theta(n^(log_b(a)))
(3) d = log_b(a), T(n) is in Theta(n^d * log(n))



1. T(n) = 4T(n/2) + n^3
We compare 3 and log2(4)
T(n) is in Theta(n^3)


2. T(n) = 5n + 4T(n/4)
We compare 1 and log4(4)
T(n) is in Theta(n*log(n))

3. T(n) = n^2 + 2T(n/2)
Compare 2 and log2(2)
T(n) is in Theta(n^2)

4. T(n) = n^2 + 8T(n/2)
2 and log2(8)
T(n) is in Theta(n^3)

If I reduce processing time to n, we still can't make it faster.
If I reduce the number of recursive calls to 6, it is faster.
		T(n) is in Theta(n^log2(6))

If I can reduce input size (in each recursive call) to n/4, it is faster.
		Compare 2 and log4(8)
		T(n) is in Theta(n^2)

5. T(n) = n^3 + 9T(n/3)
T(n) is in Theta(n^3)

6. T(n) = n^2 + 9T(n/3)
T(n) is in Theta(n^2 log(n))


7. T(n) = n + 2T(n/2).  So T(n) is in Theta(n log(n))
[py]
def foo(L):
	if L==[]:
		return 5
	s = 0
	A = L[0:len(L)//2]
	B = L[len(L)//2: len(L)]
	for x in L:
		s += x
	a = foo(A)
	b = foo(B)
	return s + a + b
[end]

--------Multiplication---------

Goal: do fast multiplication of 2 numbers: x and y.

It's not Theta(1).

Let n be the number of digits of x and y.

Mult(x,y). naive way of multiplying x and y takes Theta(n^2)

Try to improve recursively
Write x as AB. x = A*10^(n/2) + B
Write y as CD. y = C*10^(n/2) + d

heres a recursive solution:

[py]
def Mult(x,y):													# T(n) = c*n + 4T(n/2) so, T(n) is in Theta(n^2) // not faster yet
	#Find a,b,c,d 												# n
	a_c = Mult(a,c)												# T(n/2)
	a_d = Mult(a,d)												# T(n/2)
	b_c = Mult(b,c)												# T(n/2)
	b_d = Mult(b,d)

	return add_zeros(a_c, n) + add_zeros(a_d + b_c, n/2) + b_d	# n

[end]

[py]
def Mult(x,y):													# T(n) = c*n + 3T(n/2) so, T(n) is in Theta(n^log2(3)) = Theta(n^1.58) //little bit faster
	#Find a,b,c,d 												# n
	a_c = Mult(a,c)												# T(n/2)
	a_d = Mult(b,d)												# T(n/2)
	z 	= Mult(a+b, c+d) - a_c - b_d							# n + n + T(n/2) + n + n
 
	return add_zeros(a_c, n) + add_zeros(z, n/2)  + b_d			# n

[end]

here's the math:
x*y = (a*10^(n/2)+ b)*(c*10^(n/2) + d) = ac*10^n + ((a + b)(c+d) - ac -bd) *10^(n/2) + bd
 

Faster algorithims can be achieved by reusing already computed values!!!



